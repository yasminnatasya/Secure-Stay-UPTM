import 'package:flutter/material.dart';
import '../../core/app_export.dart';
import '../core/phone_field/intl_phone_field.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray100,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 0,
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(28.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primaryContainer,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(28.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 16.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 10.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 34.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 28.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 20.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 18.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'Neutrif Pro',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFD65C),
    primaryContainer: Color(0XFF004C43),

    // On colors(text colors)
    onPrimary: Color(0XFF283593),
    onPrimaryContainer: Color(0XB2FFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);
  Color get black20 => Color(0XFFDCDCDC);

  // Blue
  Color get blue800 => Color(0XFF226FA7);
  Color get blueA200 => Color(0XFF5186EE);
  Color get buttonColor => Color(0XFFFFD65C);

  // BlueGray
  Color get blueGray300 => Color(0XFFA3A3B5);
  Color get blueGray50 => Color(0XFFE6EDEC);
  Color get blueGray600 => Color(0XFF4C7D77);

  // Gray
  Color get gray100 => Color(0XFFF6F5F8);
  Color get gray10001 => Color(0XFFF4F4F4);
  Color get gray300 => Color(0XFFDBDBDB);
  Color get gray600 => Color(0XFF818181);
  Color get gray70019 => Color(0X19606470);
  Color get gray800 => Color(0XFF4E4E4E);
  Color get gray900 => Color(0XFF1A1A1A);

  // Green
  Color get greenA700 => Color(0XFF04B155);
  Color get green700 => Color(0xFF004C43);

  // Red
  Color get red500 => Color(0XFFF14336);
  Color get red50001 => Color(0XFFFF3D3D);
  Color get red700 => Color(0XFFD83636);
  Color get errorText => Color(0XFFD93636);

  Color get redA200 => Color(0XFFFF5943);
  Color get redError => Color(0XFFFF3E3E);
  Color get white => Color(0XFFFFFFFF);
  Color get bgColor => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow50 => Color(0XFFFFFBEF);

  get primaryColor => null;
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();

// setSafeAreaColor() {
//   // SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(
//   //   systemNavigationBarColor: appTheme.white, // navigation bar color
//   //   statusBarColor: appTheme.white, // status bar color
//   // ));
// }

Widget phoneNumberField(controller, String? Function(String?)? validator,
    {bool? enableborder}) {
  return IntlPhoneField(
    enbleBorder: enableborder ?? false,
    controller: controller,
    disableLengthCheck: true,
    showCountryFlag: false,

    flagsButtonPadding: EdgeInsets.zero,
    flagsButtonMargin: EdgeInsets.only(left: 16.h, right: 0.h),
    style: theme.textTheme.bodyLarge!.copyWith(
      color: appTheme.gray800,
    ),

    dropdownTextStyle: theme.textTheme.bodyLarge!.copyWith(
      color: appTheme.gray800,
    ),

    cursorColor: appTheme.buttonColor,
    dropdownIconPosition: IconPosition.trailing,
    dropdownDecoration: BoxDecoration(
        // border: Border(
        //     right: BorderSide(
        //         color: ColorConstant.gray300))
        ),

    dropdownIcon: Icon(
      Icons.keyboard_arrow_down_outlined,
      color: PrefUtils().getThemeData() == "primary"
          ? appTheme.black900
          : Colors.white,
    ),
    validator: validator,

    //     (p0) {
    //   if (p0 == null || p0.number.isEmpty) {
    //     return "Enter valid number";
    //   }
    //   return null;
    // },
    decoration: InputDecoration(
      floatingLabelStyle: theme.textTheme.bodyLarge!.copyWith(
        color: appTheme.gray800,
      ),
      contentPadding: EdgeInsets.zero,
      // labelStyle: TextStyle(
      //   color: ColorConstant.black900,
      //   fontSize: getFontSize(
      //     13,
      //   ),
      //   fontFamily: 'Outfit',
      //   fontWeight: FontWeight.w400,
      // ),
      // labelText: "Phone number",

      // label: Align(alignment: Alignment.topLeft,child: Text("Phone number",textAlign: TextAlign.left,)),
      hintText: "Phone number",
      // hintStyle:CustomTextStyles.bodyLargeblack40.copyWith(color:  PrefUtils().getThemeData() == "primary"?appTheme.black40:appTheme.whiteA700),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(12.h)),
        borderSide: BorderSide(
          color: appTheme.redError,
          width: 1,
        ),
      ),
      border: OutlineInputBorder(
        borderSide: BorderSide(
          color: Colors.transparent,
        ),
      ),
      focusedErrorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(12.h)),
        borderSide: BorderSide(
          color: appTheme.redError,
          width: 1,
        ),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12.h),
        borderSide: BorderSide(
          color: Colors.transparent,
          width: 1,
        ),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12.h),
        borderSide: BorderSide(
          color: appTheme.buttonColor,
          width: 1,
        ),
      ),
    ),
    initialCountryCode: 'IN',
    onChanged: (phone) {
      print(phone.completeNumber);
    },
    keyboardType: TextInputType.number,
  );
}
